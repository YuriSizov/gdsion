<?xml version="1.0" encoding="UTF-8" ?>
<class name="SiONDriver" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Main GDSiON class for configuration and control of the synthesizer.
	</brief_description>
	<description>
		The driver is your main tool for controlling the GDSiON synthesizer. It exposes methods to initialize streaming or rendering of the output buffer, to get internal components and modules, and to configure high level properties.
		A new instance can be created using the factory method [method create]. Note, that [SiONDriver] is a node and must be added to the scene tree.
		[codeblocks]
		[gdscript]
			var driver := SiONDriver.create()
			add_child(driver)
		[/gdscript]
		[/codeblocks]
		Using the class constructor creates an instance with every parameter set to default, which may not be desirable. Only one driver instance can exist at the same time.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="compile">
			<return type="SiONData" />
			<param index="0" name="mml" type="String" />
			<description>
				Compiles the given MML string into a [SiONData] instance. This instance can then be used to render the melody out into a buffer via [method render], or to play it via [method play].
			</description>
		</method>
		<method name="create" qualifiers="static">
			<return type="SiONDriver" />
			<param index="0" name="buffer_size" type="int" default="2048" />
			<param index="1" name="channel_num" type="int" default="2" />
			<param index="2" name="sample_rate" type="int" default="44100" />
			<param index="3" name="bitrate" type="int" default="0" />
			<description>
				Creates a new instance of [SiONDriver]. Prefer using this method instead of the class constructor.
				Use [param buffer_size] to control the size of the generated buffer. Bigger size is more demanding on your hardware. Supported values are [code]2048[/code], [code]4096[/code], [code]8192[/code].
				Use [param channel_num] to configure the number of output channels. Can only be [code]1[/code] for mono and [code]2[/code] for stereo.
				Use [param sample_rate] to control the sampling rate. Only [code]44100[/code] is supported at this time.
				Use [param bitrate] to enable quantization.
			</description>
		</method>
		<method name="get_audio_playback" qualifiers="const">
			<return type="AudioStreamGeneratorPlayback" />
			<description>
				Returns the internal [AudioStreamGeneratorPlayback] instance. Only available during streaming (after calling [method play]).
			</description>
		</method>
		<method name="get_audio_player" qualifiers="const">
			<return type="AudioStreamPlayer" />
			<description>
				Returns the internal [AudioStreamPlayer] instance. The player instance can be used to change the audio bus used by the synthesizer.
			</description>
		</method>
		<method name="get_audio_stream" qualifiers="const">
			<return type="AudioStreamGenerator" />
			<description>
				Returns the internal [AudioStreamGenerator] instance.
			</description>
		</method>
		<method name="get_bitrate" qualifiers="const">
			<return type="float" />
			<description>
				Returns the bitrate value used for quantization. See also [method create].
			</description>
		</method>
		<method name="get_buffer_length" qualifiers="const">
			<return type="int" />
			<description>
				Returns the target size of the generated buffer. See also [method create].
			</description>
		</method>
		<method name="get_channel_num" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of output channels. See also [method create].
			</description>
		</method>
		<method name="get_compiling_time" qualifiers="const">
			<return type="int" />
			<description>
				Returns the time it took to perform the last compile task (including calls to [method play]).
			</description>
		</method>
		<method name="get_effector" qualifiers="const">
			<return type="SiEffector" />
			<description>
				Returns a reference to the [SiEffector] instance. You can use it to control global effects and filters.
			</description>
		</method>
		<method name="get_processing_time" qualifiers="const">
			<return type="int" />
			<description>
				Returns the average processing time during streaming.
			</description>
		</method>
		<method name="get_queue_job_progress" qualifiers="const">
			<return type="float" />
			<description>
				Returns the progress of the current job item in the execution queue, as a value between [code]0.0[/code] and [code]1.0[/code].
			</description>
		</method>
		<method name="get_queue_length" qualifiers="const">
			<return type="int" />
			<description>
				Returns the remaining size of the execution queue.
			</description>
		</method>
		<method name="get_queue_total_progress" qualifiers="const">
			<return type="float" />
			<description>
				Returns the total progress between all jobs in the execution queue, as a value between [code]0.0[/code] and [code]1.0[/code]. The progress is calculated against the queue size at the time of the last [method start_queue] call.
			</description>
		</method>
		<method name="get_rendering_time" qualifiers="const">
			<return type="int" />
			<description>
				Returns the time it took to perform the last render task.
			</description>
		</method>
		<method name="get_sample_rate" qualifiers="const">
			<return type="float" />
			<description>
				Returns the sampling rate. See also [method create].
			</description>
		</method>
		<method name="get_sequencer" qualifiers="const">
			<return type="SiMMLSequencer" />
			<description>
				Returns a reference to the [SiMMLSequencer] instance.
			</description>
		</method>
		<method name="get_sound_chip" qualifiers="const">
			<return type="SiOPMSoundChip" />
			<description>
				Returns a reference to the [SiOPMSoundChip] instance.
			</description>
		</method>
		<method name="get_track_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of active tracks in the sequencer.
			</description>
		</method>
		<method name="get_version" qualifiers="static">
			<return type="String" />
			<description>
				Returns the current version number as a string.
			</description>
		</method>
		<method name="get_version_flavor" qualifiers="static">
			<return type="String" />
			<description>
				Returns the flavor of the current version, e.g. "stable" or "beta1".
			</description>
		</method>
		<method name="is_queue_executing" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="note_off">
			<return type="SiMMLTrack[]" />
			<param index="0" name="note" type="int" />
			<param index="1" name="track_id" type="int" default="0" />
			<param index="2" name="delay" type="float" default="0" />
			<param index="3" name="quantize" type="float" default="0" />
			<param index="4" name="stop_immediately" type="bool" default="false" />
			<description>
				Executes a note off event for all matching tracks (see also [method SiMMLTrack.get_track_id]). Returns affected tracks.
				[param delay] and [param quantize] must be in 1/16th of a beat.
				[b]Note:[/b] Streaming must be initialized before this method is called (see [method play]).
			</description>
		</method>
		<method name="note_on">
			<return type="SiMMLTrack" />
			<param index="0" name="note" type="int" />
			<param index="1" name="voice" type="SiONVoice" default="null" />
			<param index="2" name="length" type="float" default="0" />
			<param index="3" name="delay" type="float" default="0" />
			<param index="4" name="quantize" type="float" default="0" />
			<param index="5" name="track_id" type="int" default="0" />
			<param index="6" name="disposable" type="bool" default="true" />
			<description>
				Executes a note on event using the given voice. Returns the affected, or newly created, track (see also [method SiMMLTrack.get_track_id]).
				[param length], [param delay], and [param quantize] must be in 1/16th of a beat.
				Use [param disposable] to control whether the track can be freed after being used. Making a track non-disposable must be treated with care as it can lead to performance penalties.
				[b]Note:[/b] Streaming must be initialized before this method is called (see [method play]).
			</description>
		</method>
		<method name="pause">
			<return type="void" />
			<description>
				Pauses streaming initialized by [method play].
			</description>
		</method>
		<method name="play">
			<return type="void" />
			<param index="0" name="data" type="Variant" default="null" />
			<param index="1" name="reset_effector" type="bool" default="true" />
			<description>
				Starts streaming using the data provided, which is played immediately. Stops existing streaming, if it exists (see [method stop]). Does nothing when streaming is paused (see [method pause]).
				Empty data can be provided to this method to simply initialize streaming without playing anything immediately. See also [method note_on], [method note_off], [method sequence_on], and [method sequence_off].
				[codeblocks]
				[gdscript]
					driver.play("t100 l8 [ ccggaag4 ffeeddc4 | [ggffeed4]2 ]2")
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="play_sound">
			<return type="SiMMLTrack" />
			<param index="0" name="sample_number" type="int" />
			<param index="1" name="length" type="float" default="0" />
			<param index="2" name="delay" type="float" default="0" />
			<param index="3" name="quantize" type="float" default="0" />
			<param index="4" name="track_id" type="int" default="0" />
			<param index="5" name="disposable" type="bool" default="true" />
			<description>
				Plays the sound for the given sample number. Returns the affected, or newly created, track (see also [method SiMMLTrack.get_track_id]).
				[param length], [param delay], and [param quantize] must be in 1/16th of a beat.
				Use [param disposable] to control whether the track can be freed after being used. Making a track non-disposable must be treated with care as it can lead to performance penalties.
				[b]Note:[/b] Streaming must be initialized before this method is called (see [method play]).
			</description>
		</method>
		<method name="queue_compile">
			<return type="int" />
			<param index="0" name="mml" type="String" />
			<description>
				Adds a compile task to the execution queue instead of compiling immediately. See also [method compile] and [method start_queue].
				Compiled data can be retrieved via the [signal compilation_finished] signal.
			</description>
		</method>
		<method name="queue_render">
			<return type="int" />
			<param index="0" name="data" type="Variant" />
			<param index="1" name="buffer_size" type="int" />
			<param index="2" name="buffer_channel_num" type="int" default="2" />
			<param index="3" name="reset_effector" type="bool" default="false" />
			<description>
				Adds a render task to the execution queue instead of rendering immediately. See also [method render] and [method start_queue].
				Rendered buffer can be retrieved via the [signal render_finished] signal.
			</description>
		</method>
		<method name="render">
			<return type="PackedFloat64Array" />
			<param index="0" name="data" type="Variant" />
			<param index="1" name="buffer_size" type="int" />
			<param index="2" name="buffer_channel_num" type="int" default="2" />
			<param index="3" name="reset_effector" type="bool" default="true" />
			<description>
				Renders the given data into an audio buffer. The buffer can be converted into a stereo [PackedVector2Array] buffer and passed to [AudioStreamGeneratorPlayback] or saved as a wave file.
			</description>
		</method>
		<method name="reset">
			<return type="void" />
			<description>
				Resets all available tracks in the sequencer.
			</description>
		</method>
		<method name="resume">
			<return type="void" />
			<description>
				Resumes streaming previously paused by [method pause].
			</description>
		</method>
		<method name="sequence_off">
			<return type="SiMMLTrack[]" />
			<param index="0" name="track_id" type="int" />
			<param index="1" name="delay" type="float" default="0" />
			<param index="2" name="quantize" type="float" default="1" />
			<param index="3" name="stop_with_reset" type="bool" default="false" />
			<description>
				Stops execution of sequences for all matching tracks (see also [method SiMMLTrack.get_track_id]). Returns affected tracks.
				[param delay] and [param quantize] must be in 1/16th of a beat.
				[b]Note:[/b] Streaming must be initialized before this method is called (see [method play]).
			</description>
		</method>
		<method name="sequence_on">
			<return type="SiMMLTrack[]" />
			<param index="0" name="data" type="SiONData" />
			<param index="1" name="voice" type="SiONVoice" default="null" />
			<param index="2" name="length" type="float" default="0" />
			<param index="3" name="delay" type="float" default="0" />
			<param index="4" name="quantize" type="float" default="1" />
			<param index="5" name="track_id" type="int" default="0" />
			<param index="6" name="disposable" type="bool" default="true" />
			<description>
				Executes a sequence, or sequences, provided by the given data and using the given voice. Returns affected, or newly created, tracks (see also [method SiMMLTrack.get_track_id]).
				[param length], [param delay], and [param quantize] must be in 1/16th of a beat.
				Use [param disposable] to control whether the track can be freed after being used. Making a track non-disposable must be treated with care as it can lead to performance penalties.
				[b]Note:[/b] Streaming must be initialized before this method is called (see [method play]).
			</description>
		</method>
		<method name="set_beat_callback_interval">
			<return type="void" />
			<param index="0" name="length_16th" type="float" />
			<description>
				Sets an interval for the beat track event, in 1/16ths of a beat. Only power-of-two values are allowed.
			</description>
		</method>
		<method name="set_beat_event_enabled">
			<return type="void" />
			<param index="0" name="enabled" type="bool" />
			<description>
				Enables or disables reporting of the beat track event. Beat events are fired at a quick pace, so handling of them can become a performance bottleneck.
			</description>
		</method>
		<method name="set_fading_event_enabled">
			<return type="void" />
			<param index="0" name="enabled" type="bool" />
			<description>
				Enables or disables reporting of the fading track event.
			</description>
		</method>
		<method name="set_stream_event_enabled">
			<return type="void" />
			<param index="0" name="enabled" type="bool" />
			<description>
				Enables or disables reporting of the stream track event.
			</description>
		</method>
		<method name="set_timer_interval">
			<return type="void" />
			<param index="0" name="length_16th" type="float" />
			<description>
				Sets an interval for the integrated timer, in 1/16ths of a beat. This can be used as a metronome for the purposes of synchronizing note on/off events. Setting this interval to [code]0[/code] disables the timer.
			</description>
		</method>
		<method name="start_queue">
			<return type="int" />
			<param index="0" name="interval" type="int" default="500" />
			<description>
				Starts executing tasks in the execution queue. Use [param interval] to space the tasks out a bit.
			</description>
		</method>
		<method name="stop">
			<return type="void" />
			<description>
				Stops streaming initialized by [method play]. Attempts to stop gracefully if triggered while processing.
			</description>
		</method>
	</methods>
	<members>
		<member name="bpm" type="float" setter="set_bpm" getter="get_bpm" default="120.0">
			Beats per minute, or tempo, of the output. Values between [code]1[/code] and [code]4000[/code] are allowed.
		</member>
		<member name="max_track_count" type="int" setter="set_max_track_count" getter="get_max_track_count" default="128">
			Maximum number of tracks that can exist at the same time.
		</member>
		<member name="volume" type="float" setter="set_volume" getter="get_volume" default="1.0">
			Base volume of the output, before fading is applied. The volume is set as a linear value between [code]0.0[/code] and [code]1[/code].
		</member>
	</members>
	<signals>
		<signal name="bpm_changed">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted when tempo/beats per minute changes in the sequencer. This can be triggered by a command in the parsed MML string.
			</description>
		</signal>
		<signal name="compilation_finished">
			<param index="0" name="data" type="SiONData" />
			<description>
				Emitted when when a compilation task, either queued via [method queue_compile] or executed immediately via [method compile], finishes. The compiled data is passed as the sole argument.
			</description>
		</signal>
		<signal name="fade_in_completed">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted if the fader is used and after the fading in has finished. This signal is emitted after the [signal streaming] signal. Contains a [SiONDriver] instance, a [SiONData] instance (unless [method play] was called without data), and the streaming buffer as a byte array.
			</description>
		</signal>
		<signal name="fade_out_completed">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted if the fader is used and after the fading out has finished. This signal is emitted after the [signal streaming] signal. Contains a [SiONDriver] instance, a [SiONData] instance (unless [method play] was called without data), and the streaming buffer as a byte array.
			</description>
		</signal>
		<signal name="fading">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted if the fader is used and while the fading is happening. This signal is emitted after the [signal streaming] signal. Contains a [SiONDriver] instance and a [SiONData] instance (unless [method play] was called without data).
			</description>
		</signal>
		<signal name="note_off_frame">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted after the note off event is triggered in the sequencer when the event trigger type is "frame" (meaning delayed dispatch). This can be triggered by a command in the parsed MML string.
			</description>
		</signal>
		<signal name="note_off_stream">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted after the note off event is triggered in the sequencer when the event trigger type is "stream" (meaning immediate dispatch). This can be triggered by a command in the parsed MML string.
			</description>
		</signal>
		<signal name="note_on_frame">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted after the note on event is triggered in the sequencer when the event trigger type is "frame" (meaning delayed dispatch). This can be triggered by a command in the parsed MML string.
			</description>
		</signal>
		<signal name="note_on_stream">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted after the note on event is triggered in the sequencer when the event trigger type is "stream" (meaning immediate dispatch). This can be triggered by a command in the parsed MML string.
			</description>
		</signal>
		<signal name="queue_cancelled">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted when the execution/rendering queue is cancelled. Contains a [SiONDriver] instance.
			</description>
		</signal>
		<signal name="queue_completed">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted when the execution/rendering queue is completed. Contains a [SiONDriver] instance (with the processed MML string when compiling) and a [SiONData] instance.
			</description>
		</signal>
		<signal name="queue_executing">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted when the execution/rendering queue is being processed. Contains a [SiONDriver] instance (with the processed MML string when compiling) and a [SiONData] instance (only when rendering).
			</description>
		</signal>
		<signal name="render_finished">
			<param index="0" name="buffer" type="PackedFloat64Array" />
			<description>
				Emitted when when a render task, either queued via [method queue_render] or executed immediately via [method render], finishes. The rendered buffer is passed as the sole argument.
			</description>
		</signal>
		<signal name="sequence_finished">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted when an individual sequence has finished during streaming. Contains a [SiONDriver] instance and a [SiONData] instance.
			</description>
		</signal>
		<signal name="stream_started">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted after streaming has started. This signal is emitted before the first [signal streaming] signal. Contains a [SiONDriver] instance and a [SiONData] instance (unless [method play] was called without data).
			</description>
		</signal>
		<signal name="stream_stopped">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted after streaming has stopped. Contains a [SiONDriver] instance and a [SiONData] instance (unless [method play] was called without data).
			</description>
		</signal>
		<signal name="streaming">
			<param index="0" name="event" type="SiONEvent" />
			<description>
				Emitted during streaming when a portion of the buffer is ready. Contains a [SiONDriver] instance, a [SiONData] instance (unless [method play] was called without data), and the streaming buffer as a byte array.
				See also [method set_stream_event_enabled].
			</description>
		</signal>
		<signal name="streaming_beat">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted at regular intervals by the sequencer. See also [method set_beat_event_enabled].
			</description>
		</signal>
		<signal name="timer_interval">
			<description>
				Emitted at regular intervals by the internal timer. See also [method set_timer_interval].
			</description>
		</signal>
		<signal name="user_defined_event">
			<param index="0" name="event" type="SiONTrackEvent" />
			<description>
				Emitted when a user defined event occurs.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="CHIP_AUTO" value="-1" enum="SiONChipType">
			Used to select the chip type automatically. See [method SiONVoice.get_mml].
		</constant>
		<constant name="CHIP_SIOPM" value="0" enum="SiONChipType">
			Generic SiON sound chip type.
		</constant>
		<constant name="CHIP_OPL" value="1" enum="SiONChipType">
			OPL sound chip type.
		</constant>
		<constant name="CHIP_OPM" value="2" enum="SiONChipType">
			OPM sound chip type.
		</constant>
		<constant name="CHIP_OPN" value="3" enum="SiONChipType">
			OPN sound chip type.
		</constant>
		<constant name="CHIP_OPX" value="4" enum="SiONChipType">
			OPX sound chip type.
		</constant>
		<constant name="CHIP_MA3" value="5" enum="SiONChipType">
			MA3 sound chip type.
		</constant>
		<constant name="CHIP_PMS_GUITAR" value="6" enum="SiONChipType">
			PMS guitar sound chip type.
		</constant>
		<constant name="CHIP_ANALOG_LIKE" value="7" enum="SiONChipType">
			Analog-like sound chip type.
		</constant>
		<constant name="CHIP_MAX" value="8" enum="SiONChipType">
			Total number of available chip types.
		</constant>
		<constant name="MODULE_PSG" value="0" enum="SiONModuleType">
			PSG module type.
		</constant>
		<constant name="MODULE_APU" value="1" enum="SiONModuleType">
			FC pAPU module type.
		</constant>
		<constant name="MODULE_NOISE" value="2" enum="SiONModuleType">
			Noise wave module type.
		</constant>
		<constant name="MODULE_MA3" value="3" enum="SiONModuleType">
			MA3 module type.
		</constant>
		<constant name="MODULE_CUSTOM" value="4" enum="SiONModuleType">
			SCC / custom wave table module type.
		</constant>
		<constant name="MODULE_ANY_PG" value="5" enum="SiONModuleType">
			Any pulse generator module type.
		</constant>
		<constant name="MODULE_FM" value="6" enum="SiONModuleType">
			FM module type.
		</constant>
		<constant name="MODULE_PCM" value="7" enum="SiONModuleType">
			PCM module type.
		</constant>
		<constant name="MODULE_PULSE" value="8" enum="SiONModuleType">
			Pulse wave module type.
		</constant>
		<constant name="MODULE_RAMP" value="9" enum="SiONModuleType">
			Ramp wave module type.
		</constant>
		<constant name="MODULE_SAMPLE" value="10" enum="SiONModuleType">
			Sampler module type.
		</constant>
		<constant name="MODULE_KS" value="11" enum="SiONModuleType">
			Karplus-Strong module type.
		</constant>
		<constant name="MODULE_GB" value="12" enum="SiONModuleType">
			GameBoy-like module type.
		</constant>
		<constant name="MODULE_VRC6" value="13" enum="SiONModuleType">
			VRC6 module type.
		</constant>
		<constant name="MODULE_SID" value="14" enum="SiONModuleType">
			SID module type.
		</constant>
		<constant name="MODULE_FM_OPM" value="15" enum="SiONModuleType">
			YM2151 module type (unused).
		</constant>
		<constant name="MODULE_FM_OPN" value="16" enum="SiONModuleType">
			YM2203 module type (unused).
		</constant>
		<constant name="MODULE_FM_OPNA" value="17" enum="SiONModuleType">
			YM2608 module type (unused).
		</constant>
		<constant name="MODULE_FM_OPLL" value="18" enum="SiONModuleType">
			YM2413 module type (unused).
		</constant>
		<constant name="MODULE_FM_OPL3" value="19" enum="SiONModuleType">
			YM3812 module type (unused).
		</constant>
		<constant name="MODULE_FM_MA3" value="20" enum="SiONModuleType">
			YMU762 module type (unused).
		</constant>
		<constant name="MODULE_MAX" value="21" enum="SiONModuleType">
			Total number of available module types.
		</constant>
		<constant name="PITCH_TABLE_OPM" value="0" enum="SiONPitchTableType">
			OPM pitch table type.
		</constant>
		<constant name="PITCH_TABLE_PCM" value="1" enum="SiONPitchTableType">
			PCM pitch table type.
		</constant>
		<constant name="PITCH_TABLE_PSG" value="2" enum="SiONPitchTableType">
			PSG pitch table type.
		</constant>
		<constant name="PITCH_TABLE_OPM_NOISE" value="3" enum="SiONPitchTableType">
			OPM noise pitch table type.
		</constant>
		<constant name="PITCH_TABLE_PSG_NOISE" value="4" enum="SiONPitchTableType">
			PSG noise pitch table type.
		</constant>
		<constant name="PITCH_TABLE_APU_NOISE" value="5" enum="SiONPitchTableType">
			APU noise pitch table type.
		</constant>
		<constant name="PITCH_TABLE_GB_NOISE" value="6" enum="SiONPitchTableType">
			GameBoy-like noise pitch table type.
		</constant>
		<constant name="PITCH_TABLE_MAX" value="7" enum="SiONPitchTableType">
			Total number of available pitch table types.
		</constant>
		<constant name="PULSE_SINE" value="0" enum="SiONPulseGeneratorType">
			Sine wave pulse generator.
		</constant>
		<constant name="PULSE_SAW_UP" value="1" enum="SiONPulseGeneratorType">
			Upwards saw wave pulse generator.
		</constant>
		<constant name="PULSE_SAW_DOWN" value="2" enum="SiONPulseGeneratorType">
			Downwards saw wave pulse generator.
		</constant>
		<constant name="PULSE_TRIANGLE_FC" value="3" enum="SiONPulseGeneratorType">
			Triangle wave pulse generator quantized by 4 bit.
		</constant>
		<constant name="PULSE_TRIANGLE" value="4" enum="SiONPulseGeneratorType">
			Triangle wave pulse generator.
		</constant>
		<constant name="PULSE_SQUARE" value="5" enum="SiONPulseGeneratorType">
			Square wave pulse generator.
		</constant>
		<constant name="PULSE_NOISE" value="6" enum="SiONPulseGeneratorType">
			32k white noise pulse generator.
		</constant>
		<constant name="PULSE_KNM_BUBBLE" value="7" enum="SiONPulseGeneratorType">
			Konami bubble system pulse generator.
		</constant>
		<constant name="PULSE_SYNC_LOW" value="8" enum="SiONPulseGeneratorType">
			Low frequency pseudo sync pulse generator.
		</constant>
		<constant name="PULSE_SYNC_HIGH" value="9" enum="SiONPulseGeneratorType">
			High frequency pseudo sync pulse generator.
		</constant>
		<constant name="PULSE_OFFSET" value="10" enum="SiONPulseGeneratorType">
			Offset pulse generator.
		</constant>
		<constant name="PULSE_SAW_VC6" value="11" enum="SiONPulseGeneratorType">
			VC6 saw pulse generator (32 samples saw).
		</constant>
		<constant name="PULSE_NOISE_WHITE" value="16" enum="SiONPulseGeneratorType">
			16k white noise pulse generator.
		</constant>
		<constant name="PULSE_NOISE_PULSE" value="17" enum="SiONPulseGeneratorType">
			16k pulse noise pulse generator.
		</constant>
		<constant name="PULSE_NOISE_SHORT" value="18" enum="SiONPulseGeneratorType">
			FC short noise pulse generator.
		</constant>
		<constant name="PULSE_NOISE_HIPASS" value="19" enum="SiONPulseGeneratorType">
			FC high pass noise pulse generator.
		</constant>
		<constant name="PULSE_NOISE_PINK" value="20" enum="SiONPulseGeneratorType">
			Pink noise pulse generator.
		</constant>
		<constant name="PULSE_NOISE_GB_SHORT" value="21" enum="SiONPulseGeneratorType">
			GameBoy-like short noise pulse generator.
		</constant>
		<constant name="PULSE_PC_NZ_16BIT" value="24" enum="SiONPulseGeneratorType">
			Pitch-controllable periodic noise pulse generator.
		</constant>
		<constant name="PULSE_PC_NZ_SHORT" value="25" enum="SiONPulseGeneratorType">
			Pitch-controllable 93-byte noise pulse generator.
		</constant>
		<constant name="PULSE_PC_NZ_OPM" value="26" enum="SiONPulseGeneratorType">
			Pitch-controllable pulse noise with OPM noise table pulse generator.
		</constant>
		<constant name="PULSE_MA3_WAVE" value="32" enum="SiONPulseGeneratorType">
			This and the next [code]32[/code] values are MA3 waveform pulse generators.
		</constant>
		<constant name="PULSE_PULSE" value="64" enum="SiONPulseGeneratorType">
			This and the next [code]16[/code] values are square pulse wave pulse generators.
		</constant>
		<constant name="PULSE_PULSE_SPIKE" value="80" enum="SiONPulseGeneratorType">
			This and the next [code]16[/code] values are square pulse wave with spike pulse generators.
		</constant>
		<constant name="PULSE_RAMP" value="128" enum="SiONPulseGeneratorType">
			This and the next [code]128[/code] values are ramp wave pulse generators.
		</constant>
		<constant name="PULSE_CUSTOM" value="256" enum="SiONPulseGeneratorType">
			This and the next [code]128[/code] values are custom wave table pulse generators.
		</constant>
		<constant name="PULSE_PCM" value="384" enum="SiONPulseGeneratorType">
			This and the next [code]128[/code] values are PCM data pulse generators.
		</constant>
		<constant name="PULSE_USER_CUSTOM" value="-1" enum="SiONPulseGeneratorType">
			User registered custom wave table pulse generator.
		</constant>
		<constant name="PULSE_USER_PCM" value="-2" enum="SiONPulseGeneratorType">
			User registered PCM data pulse generator.
		</constant>
	</constants>
</class>
